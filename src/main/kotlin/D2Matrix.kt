import java.util.function.BiFunction

class D2DoubleMatrix(private val rowNumber: Int, private val columnNumber: Int) {
    private var entryArray = DoubleArray(rowNumber * columnNumber)

    fun getEntryArray() : DoubleArray {
        return entryArray.clone()
    }

    fun shape(): Pair<Int, Int> {
        return Pair<Int, Int>(rowNumber, columnNumber)
    }

    fun numberAt(rowPos: Int, columnPos: Int) : Double {
        assert(rowPos in 0 until rowNumber)
        assert(columnPos in 0 until columnNumber)
        return entryArray[rowPos * columnNumber + columnPos]
    }

    fun setAt(rowPos: Int, columnPos: Int, value: Double) {
        assert(rowPos in 0 until rowNumber)
        assert(columnPos in 0 until columnNumber)
        entryArray[rowPos * columnNumber + columnPos] = value
    }

    fun binaryPointwiseOperator(to: D2DoubleMatrix, op: BiFunction<Double, Double, Double>): D2DoubleMatrix {
        assert(to.shape() == this.shape())
        val entryTo = to.getEntryArray()
        val entryThis = getEntryArray()
        for (i in entryTo.indices) {
            entryTo[i] = op.apply(entryThis[i], entryTo[i])
        }
        return MatrixCreator.fromFlatArray(shape().first, shape().second, entryTo)
    }

    operator fun plus(to: D2DoubleMatrix) = binaryPointwiseOperator(to, { a, b -> a + b})
    operator fun minus(to: D2DoubleMatrix) = binaryPointwiseOperator(to, {a, b -> a - b})
    operator fun times(to: Double): D2DoubleMatrix {
        val entryThis = getEntryArray()
        for (i in entryThis.indices) {
            entryThis[i] *= to
        }
        return MatrixCreator.fromFlatArray(shape().first, shape().second, entryThis)
    }

    operator fun times(to : D2DoubleMatrix) : D2DoubleMatrix{
        val multiplier: multiplyStrategy = Strassen()
        return multiplier.multiply(this, to)
    }

    override fun toString(): String {
        var result = ""
        result += "["
        for (i in 0 until shape().first) {
            result += if(i == 0) "[" else " ["
            for (j in 0 until shape().second) {
                val elem = numberAt(i, j)
                result += if (j == shape().second - 1) "$elem" else "$elem, "
            }
            result += if (i == shape().first - 1) "]]" else "],\n"
        }

        return result
    }


    override fun equals(other: Any?): Boolean {
        if (!(other is D2DoubleMatrix)) {
            return false
        }

        var thisEntry = getEntryArray()
        var otherEntry = other.getEntryArray()

        if(thisEntry.lastIndex != otherEntry.lastIndex) {
            return false
        }

        var precision = 1e-10

        for (i in 0..thisEntry.lastIndex) {
            if (Math.abs(thisEntry[i] - otherEntry[i]) > precision) {
                return false
            }
        }
        return true

    }
    //autogenerated by Intellij Idea
    override fun hashCode(): Int {
        var result = rowNumber
        result = 31 * result + columnNumber
        result = 31 * result + entryArray.contentHashCode()
        return result
    }


}



